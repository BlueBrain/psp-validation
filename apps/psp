#!/usr/bin/env python
from __future__ import print_function

import os
import yaml
import logging

import h5py
import numpy as np

import bluepy

from psp_validation import psp
from psp_validation.pathways import get_pairs, get_synapse_type
from psp_validation.persistencyutils import dump_raw_traces_to_HDF5


LOGGER = logging.getLogger(__name__)


def load_yaml(filepath):
    """ Load YAML file. """
    with open(filepath, 'r') as f:
        return yaml.load(f)


def load_config(filepath):
    """ Load YAML job config. """
    title = os.path.splitext(os.path.basename(filepath))[0]
    return title, load_yaml(filepath)


def get_traces(blue_config, pre_gid, post_gid, protocol, n_repetitions, seed):
    from psp_validation.psp import run_pair_trace_simulations

    hold_V = protocol['hold_V']
    if hold_V is None:
        hold_I = None
    else:
        from bglibpy import holding_current
        LOGGER.info("Calculating a%d holding current", post_gid)
        hold_I, _ = holding_current(hold_V, post_gid, blue_config)

    LOGGER.info("Running simulation(s) for a%d -> a%d pair (base_seed=%d)", pre_gid, post_gid, seed)
    return run_pair_trace_simulations(
        blue_config=blue_config,
        pre_gid=pre_gid,
        post_gid=post_gid,
        hold_I=hold_I,
        hold_V=hold_V,
        t_stim=protocol['t_stim'],
        t_stop=protocol['t_stop'],
        g_factor=1.0,
        record_dt=protocol['record_dt'],
        post_ttx=protocol['post_ttx'],
        v_clamp=protocol['v_clamp'],
        spikes=None,
        repetitions=n_repetitions,
        rndm_seed=seed,
        use_multiprocessing=True
    )


def main(args):
    logging.basicConfig(level=logging.WARNING)
    LOGGER.setLevel({
        0: logging.WARNING,
        1: logging.INFO,
        2: logging.DEBUG
    }[args.verbose])

    if args.seed is None:
        seed = np.random.randint(1e9)
    else:
        seed = args.seed

    np.random.seed(seed)

    circuit = bluepy.Circuit(args.circuit).v2
    targets = load_yaml(args.targets)

    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)

    for config_path in args.task_config:
        title, config = load_config(config_path)
        LOGGER.info("Processing '%s' pathway...", title)

        pathway = config['pathway']
        if isinstance(pathway, list):
            for item in pathway:
                assert isinstance(item, list) and len(item) == 2
            pairs = pathway
        else:
            LOGGER.info("Querying pathway pairs...")
            pre = targets[pathway['pre']]
            post = targets[pathway['post']]
            pairs = get_pairs(
                circuit, pre, post, args.num_pairs, constraints=pathway.get('constraints')
            )

        pre_syn_type = get_synapse_type(circuit, [p[0] for p in pairs])

        protocol = config['protocol']

        t_stim = config['protocol']['t_stim']
        t_start = t_stim - 10.
        spike_filter = psp.default_spike_filter(t_start)

        all_traces = []
        all_amplitudes = []
        for pre_gid, post_gid in pairs:
            traces = get_traces(args.circuit, pre_gid, post_gid, protocol, args.num_trials, seed=seed)
            vts = np.array([tr[:2] for tr in traces])
            v_mean, t, _, _ = psp.mean_pair_voltage_from_traces(vts, spike_filter)
            ampl = psp.get_peak_amplitude(t, v_mean, t_start, t_stim, pre_syn_type)
            all_amplitudes.append(ampl)
            if args.dump_traces:
                all_traces.append(traces)

        if args.dump_traces:
            traces_path = os.path.join(args.output_dir, title + ".traces.h5")
            with h5py.File(traces_path, 'w') as h5f:
                dump_raw_traces_to_HDF5(h5f, title, all_traces)

        if args.dump_amplitudes:
            amplitudes_path = os.path.join(args.output_dir, title + ".amplitudes.txt")
            np.savetxt(amplitudes_path, all_amplitudes, fmt="%.9f")

        model_mean = np.mean(all_amplitudes)
        model_std = np.std(all_amplitudes)

        if 'reference' in config:
            reference = config['reference']['psp_amplitude']
            v_holding = config['protocol']['hold_V']
            E_rev = config['protocol']['E_rev']
            scaling = psp.compute_scaling(model_mean, reference['mean'], v_holding, E_rev)
        else:
            reference = {'mean': None, 'std': None}
            scaling = None

        summary_path = os.path.join(args.output_dir, title + ".summary.yaml")
        with open(summary_path, 'w') as f:
            print(
                "pathway: {pathway}\n"
                "model:\n"
                "    mean: {model_mean}\n"
                "    std:  {model_std}\n"
                "reference:\n"
                "    mean: {ref_mean}\n"
                "    std:  {ref_std}\n"
                "scaling: {scaling}".format(
                    pathway=title,
                    model_mean=model_mean,
                    model_std=model_std,
                    ref_mean=reference['mean'],
                    ref_std=reference['std'],
                    scaling=scaling
                ),
                file=f
            )


if __name__ == "__main__" :
    import argparse
    parser = argparse.ArgumentParser(description="Analyze PSP amplitudes")
    parser.add_argument(
        "-c", "--circuit",
        required=True,
        help="Path to BlueConfig"
    )
    parser.add_argument(
        "-t", "--targets",
        required=True,
        help="Path to neuron groups definitions (YAML)"
    )
    parser.add_argument(
        "-n", "--num-pairs",
        type=int,
        required=True,
        help="Sample NUM_PAIRS pairs from each pathway"
    )
    parser.add_argument(
        "-r", "--num-trials",
        type=int,
        required=True,
        help="Run NUM_TRIALS simulations for each pair"
    )
    parser.add_argument(
        "-o", "--output-dir",
        required=True,
        help="Path to output folder"
    )
    parser.add_argument(
        "--dump-amplitudes",
        action="store_true",
        help="Dump PSP amplitudes [default: %(default)s]"
    )
    parser.add_argument(
        "--dump-traces",
        action="store_true",
        help="Dump PSP traces [default: %(default)s]"
    )
    parser.add_argument(
        "--seed",
        type=int,
        default=None,
        help="Pseudo-random generator seed"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="count",
        default=0,
        help="-v for INFO, -vv for DEBUG"
    )
    parser.add_argument(
        "task_config",
        nargs="*",
        help="YAML task config(s)"
    )
    main(parser.parse_args())
